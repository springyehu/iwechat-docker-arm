# 工作流名称
name: Manual Build and Push ARM Image to GHCR

# 触发条件：只允许手动触发 (workflow_dispatch)
on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'arm'
        required: true
        default: 'latest'

# 定义任务
jobs:
  build-and-push:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 设定权限，这是推送到 GHCR 所必需的
    permissions:
      contents: read
      packages: write

    steps:
      # 步骤 1: 检出代码
      # 拉取你的仓库代码到 Actions 的运行环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 准备 myapp 文件
      # 在打包前，删除旧文件并下载新版本
      - name: Download and Prepare myapp
        run: |
          echo "Removing old 'myapp' file if it exists..."
          rm -f myapp
          
          echo "Downloading new 'myapp' from URL..."
          # 使用 curl 下载文件。-L 跟随重定向, -o 指定输出文件名
          curl -L -o myapp https://files.catbox.moe/ritsne
          
          echo "Setting execute permission for myapp..."
          # 增加可执行权限，这通常是必要的
          chmod +x myapp
          
          echo "File 'myapp' is ready."
          # (可选) 显示文件信息以供调试
          ls -lh myapp

      # 步骤 3: 设置 QEMU
      # QEMU 是一个模拟器，它允许我们在 x86 架构的 runner 上构建 ARM 架构的镜像
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 4: 设置 Docker Buildx
      # Buildx 是一个 Docker 的高级构建工具，支持多平台构建
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 登录到 GitHub Container Registry (GHCR)
      # 使用 GITHUB_TOKEN 进行安全认证
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # 仓库所有者的用户名
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub 自动提供的 token

      # 步骤 6: 构建并推送 Docker 镜像
      # 这一步会使用在 "步骤 2" 中准备好的新的 myapp 文件
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 构建上下文，'.' 表示当前目录
          context: .
          # 指定要构建的平台为 linux/arm64
          platforms: linux/arm64
          # 推送镜像到仓库
          push: true
          # 设置镜像的标签
          # 格式为 ghcr.io/你的用户名或组织名/你的仓库名:标签
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.event.inputs.image_tag }}
          # 开启构建缓存，可以加速后续的构建
          cache-from: type=gha
          cache-to: type=gha,mode=max
